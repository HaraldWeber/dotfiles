# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Color Promt to red if root
if [[ ${EUID} == 0 ]] ; then
    debian_chroot="${Red}${debian_chroot:+($debian_chroot)}"
fi

function git_prompt() {

    # Return if not inside a Git repository work tree.
    GIT_DIR=`git rev-parse --git-dir 2>/dev/null`
    if [ -z "$GIT_DIR" ]; then
        return 0
    fi

    # disble prompt by executing git config --bool prompt.showinfo false 
    GIT_PROMPT_ENABLED=$(git config --bool prompt.showinfo)
    if [[ ${GIT_PROMPT_ENABLED} == "false" ]]; then
        return 1
    fi

    # Define some colors (from color.bash)
    COLOR_GIT_CLEAN=${Green}
    COLOR_GIT_STAGED=${Cyan}
    COLOR_GIT_UNSTAGED=${Red}

    # Getting branch info
    GIT_HEAD=`cat $GIT_DIR/HEAD`
    GIT_BRANCH=${GIT_HEAD##*/}
    if [ ${#GIT_BRANCH} -eq 40 ]; then
        GIT_BRANCH="(no branch)"
    fi

    STATUS=`git status --porcelain`
    if [ -z "$STATUS" ]; then
        GIT_COLOR="${c_git_clean}"
    else
        echo -e "$STATUS" | grep -q '^ [A-Z\?]'
        if [ $? -eq 0 ]; then
            GIT_COLOR="${COLOR_GIT_UNSTAGED}"
        else
            GIT_COLOR="${COLOR_GIT_STAGED}"
        fi
    fi
    echo "[${GIT_COLOR}${GIT_BRANCH}$Color_Off]"
}

# Set the prompt
PROMPT_COMMAND='PS1="${debian_chroot}\u@\h:\W$(git_prompt)\$ "'
